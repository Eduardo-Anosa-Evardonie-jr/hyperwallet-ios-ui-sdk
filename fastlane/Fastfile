lane :beta do
  version = updateVersion("beta")
  update("beta", version)
end

lane :release_beta do
  version = updateVersion("beta")
  message = "Release #{version}"
  add_git_tag(tag: "#{version}", message: "#{message}")
  set_github_release(tag_name: "#{version}", description: "#{message}")
  push_to_git_remote
  pod_push(allow_warnings: true, skip_tests: true)
end

lane :test do |options|
  # scheme_to_test = "Demo"
 
  # scan_options = {
  #   scheme: scheme_to_test,
  #   device: 'iPhone 11',
  #   output_directory: 'artifacts/tests',
  #   output_files: 'report.xml'
  # }
  # begin
  #   retry_count ||= 0
  #   scan(scan_options)
  # rescue => e
  #   UI.important("failure noted: #{e}")
  #   report_filepath = File.absolute_path('../artifacts/tests/report.xml')
  #   unless File.exist?(report_filepath)
  #     raise e
  #   end
  #   if (retry_count += 1) < 3
  #     setup_fragile_tests_for_rescan(
  #       project_path: File.absolute_path('../HyperwalletUISDK.xcodeproj'),
  #       scheme: scheme_to_test,
  #       report_filepath: report_filepath
  #     )
  #     clear_derived_data
  #     reset_simulator_contents if retry_count > 1
  #     retry
  #   end
  # end
  test_run_block = lambda do |testrun_info|
    failed_test_count = testrun_info[:failed].size
    passed_test_count = testrun_info[:passing].size
    try_attempt = testrun_info[:try_count]
    batch = testrun_info[:batch]

    # UI.abort_with_message!('You could conditionally abort')
    UI.message("\á½ A everything is fine, let's continue try #{try_attempt + 1} for batch #{batch}")
  end

  multi_scan(
    project: File.absolute_path('../HyperwalletUISDK.xcodeproj'),
    scheme: "Demo",
    device: 'iPhone 11',
    try_count: 3,
    batch_count: 1,
    parallel_testrun_count: 1,
    testrun_completed_block: test_run_block
  )
end

def updateVersion(type)
  version = last_git_tag
  if type == "beta" then
    version_components = version.split("beta")
    last_component = version_components[-1].to_i + 1
    last_component_string = last_component.to_s
    if last_component_string.size == 1 then
      last_component_string = "0" + last_component_string
    end
    version_components[-1] = last_component_string
    build_version = version_components.join("beta")
  end
end

def update(type, version)
  podspec_name = "HyperwalletUISDK.podspec"
  pod_lib_lint(allow_warnings: true, skip_tests: true)
  version_bump_podspec(version_number: version, path: podspec_name)
  git_add(path: [podspec_name, "*.md"])
  git_commit(path: [podspec_name, "*.md"], message: "Release #{version}")
  push_to_git_remote
end
